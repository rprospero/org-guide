* Introduction

So, you've inherited a =.org= file and have no idea what to do with
it.  I'm going to try to help you with that.  After all, if you're
reading this, then there's a good chance that I'm they guy that left
you the =.org= file, so this is kind of my fault.  However, I promise
you that I didn't do it just to be difficult.  Org mode is a very
powerful way of organizing both code and data.  It gives you the power
of Mathematica notebooks or IPython notebooks without being tied down
to a single language.  It lets you document your software like a book,
keep all of your data in one place, and make sure that your code and
data are in sync.  It will also keep track of your progress on
projects, write your daily agenda, and let you know when you're
running behind.  It'll even balance your check book, if you get really
excited.

However, that's a ways away.  We'll start slowly here.

** A Word On Style

This guide is intended to get you started working with org files as
quickly and proficiently as possible.  The catch is that org files are
edited through Emacs, which is an ancient and byzantine program which
has its own way of doing nearly everything.

Through most of this guide, I will *not* focus on teaching the /Emacs
Way/ of doing things, but stick with what will be simpler.  If you
find yourself spending large amounts of time in Emacs, it might be
better to learn the official ways, as some of what I will teach is
considered blasphemous to use on a regular basis.

** Quick Start

If you're a true beginner, you're probably reading this right now in
your web browser (e.g. Firefox, IE, Chrome).  That's a good place to
start, but that's not the actual =.org=.  All of this documentation
came from an =.org= file called guide.org.

Start the program =Gnu Emacs=.  Go to the file menu and click =Open
File...= Open the file =guide.org=.  You'll see a list of chapter
headings, each followed by an ellipsis.  Click on the first line, which should read

: * Introduction...

Hit the TAB key.  The Introduction section will be expanded.  However,
subsections, such as this one, will still be collapsed.  Hitting the
TAB key again will expand all of the subsections.  Hitting the key
ford a third time will collapse the section back down to a header.

Go ahead and expand all of the subsections.  Then scroll down to the
[[Quick Start][Quick Start]] subsection.  If you follow for four more paragraphs, you
should be able to find this sentence again.  Congratulations!  You're
now reading the guide in org-mode itself!  As you grow more
comfortable with org-mode and emacs, you will probably find reading
this documentation directly to be more helpful than just having a copy
in the browser.  However, for right now, keep the browser open.  The
reasoning for this is that Emacs uses a large number of keyboard
commands and is VERY finicky about them.  If you start performing a
hot key and need to scroll the page to find out more, Emacs will
assume that the scrolling is part of the hot key and the command will
fail.  

*** Exporting Documentation

Look toward the bottom of your Emacs window.  There should be a grey
line that says "guide.org" on the left hand side.  Beneath that is a
blank line.  That blank line is known as the Minibuffer.  Try hitting
Ctrl+C.  This will cause the Minibuffer to read

: C-c-

This indicates that emacs has recognized that you've hit Ctrl+c.  The
capital C stands for Control.  The reason that it says =C= and not
=Ctrl= is imply because emacs is really, really old.  Now hit Ctrl+g.
The Minibuffer should read

: C-c C-g is undefined

Ctrl+g is the cancel hotkey for Emacs.  Anytime something weird is
happening and you're not sure what's going on, hit Ctrl-g to get Emacs
to stop what it's doing.

Now we're going to try our first real command.  Type Ctrl+c, followed
by Ctrl+e.  The Emacs window will suddenly split in half and there
will be a large frame describing the export options that you have
available.  You should see one line which says 

: [h] Export to HTML

We want to reproduce the browser documentation, so hit the =h= key.
The =h= in the "[h] Export to HTML" line should stop being
highlighted.  The two lines below should still have highlighted
letters.  Hit the =o= key to export this file to HTML and load it in
the browser.  Your favorite web browser will open up and you'll see
the guide.html file.  

Congratulations!  You now know how to turn an org file into a web
page.  The browser documentation that you started with was made by
doing exactly what you just did.

*** Exporting Code

While it's great that you can now get to the documentation, it's not
very useful without something to document.  We'll write a very simple
program.

#+begin_src python :exports code :tangle simple.py
  print("This is a very simple program.")
#+end_src

If you look at the code within the org file, it'll read as


: #+begin_src python :exports code :tangle simple.py
:   print("This is a very simple program.")
: #+end_src

The =#+begin_src= and =#+end_src= tags mark that the text in the
middle is part of a program.  The name of the language immediately
follows the =#+begin_src= declaration.  In this case, the language was
Python.  The src tags and the language names are the only parts
required for a block of source code.  Optional information can be
added with tags that begin with a colon.  For instance, the =:exports=
tag tells org-mode how to behave when the documentation is being
[[Exporting Documentation][exported]].  The picking =:exports code= tells org-mode to just put the
code block in the documentation.  On the other hand, =:exports
results= causes org-mode to *run* the code in the block and put the
output of the program into the documentation instead.  If you want
both the code and the documentation, then you'd choose =:exports
both=, while =:exports none= would keep the whole thing out.

The hot key =Ctrl+c Ctrl+v t= will tangle the file and help explain
the =:tangle= option..  Tangling is process of extracting the source
code out of a file.  Running the hot key should give you the message

: Tangled NUMBER code blocks from guide.org

The =:tangle= option tells org-mode where to put the source once its
been extracted.  

Go ahead and run the =Ctrl+c Ctrl+v t= hot key.  There should now be a
file [[file:simple.py][simple.py]] which contains the program from the above block.
Congratulations!  You can now get both the documentation and source
out of the org file.  If you've decided that you hate emacs and
org-mode, you can now head on your merry way, as you never NEED to use
them again.  You can edit the source in whatever program you like and
write your own documentation however you want.  On the other hand, if
you'd like to learn more about what's available, continue on to the
next chapter.


* Reading Org Files

  Since all of this documentation is in an org file, it'd be a little
  rude of me not to give some instructions on how to understand the
  various nuances.

** Headings

   A line which starts with an asterisk is a section heading.  The
   more asterisks, the more deeply nest the section is.  You are
   currently in the "Headings" subsection of the "Reading Org Files"
   section.

** Quotes

   Any line which starts with a colon followed is a quote.  This is
   useful not just for quoting text, but also for including
   information which might get eaten by org-mode's text progressing.
   For instance, typing
: [[Quotes]]
   directly into emacs, without quoting it first, will give you [[Quotes]]
   (notice the lack of brackets).

** Links

   It's possible to link between parts of an org document.  To follow
   a link, click on it. To create a link, put the heading name between
   inside two set of square brackets.  For instance, [[Links]] will link
   you back to this section.
   

   Wait, that's no help at all.  All you see is the word =Links=
   underlined and in a different color.  What I actually typed was 
: [[Links]]

   It's possible to give a link a name besides the heading name.  For
   instance, there is no section marked [[Links][Grand Unified Field Theory]].
   That link just takes you back to the start of the section.  The
   actual text reads
: [[Links][Grand Unified Field Theory]]

   The first text in the square bracket is the location to link to,
   while the second is the text for the link.  This can also be used
   to create links to things outside the file.

: [[file:guide.html][A link to a local file]]
: [[http://orgmode.org/manual/index.html][An internet link]]

* Beginning Editing

  Emacs is a text editor in the same way that a Boeing 747 is a walkie
  talkie.  After all, you can climb into the cockpit, pick up the
  microphone, press the button, and talk to some person at the air
  traffic control tower.  It does everything a walkie talkie is
  supposed to do.  However, you can certainly find a light
  walkie-talkie and a less expensive one.  However, the does some neat
  things that your average walkie talkie doesn't.  You can use it as a
  flash light, a storage shed, an air conditioner, or even a bus.
  With some training, there are people who have even made one fly, but
  that's far beyond the scope of this document.

  
** The Basics

   There's a couple of basic things that you'll want from any text
   editor.

*** Opening a file

    There are three ways to open a file.  The most familiar is to open
    the =File= menu and select =Open File...=.  This will bring up the
    standard file dialog for your operating system.  Similarly,
    clicking on the open icon in the tool bar.

#+CAPTION: The open icon in the tool bar
    [[file:opentoolbar.png]]

    The final way to open files is via the hot key =Ctrl+x Ctrl+f=.  A
    message will pop up in the mini buffer asking for the path of the
    file.  If the file has a long name, you can use the TAB key to
    complete the file name for you.  For instance, if you need to open
    =StupidlyLongFileName.txt=, you can simply type =Stup= and hit the
    tab key and emacs will complete the rest for you.  If there are
    two possible completion (e.g. =StupidlyLongFileName1.txt= and
    =StupidlyLongFileName2.txt=), then Emacs will fill out everything
    it can (=StupidlyLongFileName=) and let you type the next
    character that distinguishes between the two files (=1= or =2=).
    You can hit the TAB key twice to get a list of all of the possible
    completions.

*** Saving a file

    Again, there are three methods to save a file.  Under the =File=
    menu, the familiar =Save= and =Save as= options are available,
    just as in other word processors.  Also, the save icon is
    available on the tool bar.

#+CAPTION: The save icon on the tool bar
    [[file:savetoolbar.png]]

    Finally, the hot key =Ctrl+x Ctrl+s= will save the current file.
    If you'd like to save the file under a new name, hit =Ctrl+x
    Ctrl+w= and type the new file name in the minibuffer.
    





* Miscellaneous

I'm using this part of the document to handle all of the org mode
formatting.  I don't want it at the front, since it would be confusing
to people opening an org file for the first time.

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [twocolumn]

#+TITLE: A Newbie's Guide to Org Mode in Emacs
#+AUTHOR: Adam Washington
#+STARTUP: inlineimages

#  LocalWords:  Minibuffer Ctrl minibuffer

